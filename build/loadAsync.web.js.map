{"version":3,"file":"loadAsync.web.js","sourceRoot":"","sources":["../src/loadAsync.web.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,wCAAwC;AAExC,MAAM,CAAC,OAAO,CAAC,KAAK,UAAU,SAAS,CAAC,GAAG;IACzC,IAAI,OAAO,GAAG,GAAG,CAAC;IAClB,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,KAAK,IAAI,IAAI,GAAG,CAAC,aAAa,EAAE;QAChE,OAAO,GAAG,GAAG,CAAC,QAAQ,IAAI,GAAG,CAAC,GAAG,CAAC;KACnC;IAED,IAAI,OAAO,CAAC,KAAK,CAAC,uBAAuB,CAAC,EAAE;QAC1C,OAAO,YAAY,CAAC,OAAO,CAAC,CAAC;KAC9B;SAAM,IAAI,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE;QACnC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE;YACpB,OAAO,CAAC,qCAAqC,CAAC,CAAC;SAChD;QACD,MAAM,MAAM,GAAG,IAAI,KAAK,CAAC,SAAS,EAAE,CAAC;QACrC,OAAO,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,EAAE,GAAG,EAAE,GAAE,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;KAChG;SAAM;QACL,MAAM,IAAI,KAAK,CAAC,uBAAuB,GAAG,OAAO,CAAC,CAAC;KACpD;AACH,CAAC;AAED,KAAK,UAAU,YAAY,CAAC,KAAK;IAC/B,OAAO,IAAI,KAAK,CAAC,aAAa,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC/C,CAAC","sourcesContent":["import * as THREE from 'three';\n\n// global.THREE = global.THREE || THREE;\n\nexport default async function loadAsync(res) {\n  let nextRes = res;\n  if (typeof res === 'object' && res !== null && res.downloadAsync) {\n    nextRes = res.localUri || res.uri;\n  }\n\n  if (nextRes.match(/\\.(jpeg|jpg|gif|png)$/)) {\n    return parseTexture(nextRes);\n  } else if (nextRes.match(/\\.obj$/i)) {\n    if (!THREE.OBJLoader) {\n      require('three/examples/js/loaders/OBJLoader');\n    }\n    const loader = new THREE.OBJLoader();\n    return await new Promise((resolve, reject) => loader.load(nextRes, resolve, () => {}, reject));\n  } else {\n    throw new Error('unsupported file type' + nextRes);\n  }\n}\n\nasync function parseTexture(asset) {\n  return new THREE.TextureLoader().load(asset);\n}\n"]}