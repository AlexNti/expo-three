{"version":3,"file":"parseAsync.js","sourceRoot":"","sources":["../src/parseAsync.ts"],"names":[],"mappings":"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","sourcesContent":["import resolveAsset, { stringFromAsset } from './resolveAsset';\nimport THREE from './Three';\n\nasync function loadBinAsync(binLocalUrl: string): Promise<any> {\n  const bufferLoader = new THREE.FileLoader(THREE.DefaultLoadingManager);\n  bufferLoader.setResponseType('arraybuffer');\n  return new Promise((res, rej) => bufferLoader.load(binLocalUrl, res, () => {}, rej));\n}\n\nasync function parseBinAsync({ json, onProgress, assetProvider }): Promise<any> {\n  const { buffers, materials } = json;\n  if (!buffers) {\n    throw new Error(\n      `ExpoTHREE.parseAsync: Invalid json! The json file must contain a \"buffers\" key.`\n    );\n  }\n  const bin = await assetProvider(buffers);\n  if (bin === undefined) {\n    throw new Error(\n      `ExpoTHREE.parseAsync: Cannot parse undefined .bin. Using the assetProvider you must pass a valid reference for: ${buffers}.`\n    );\n  }\n  const assets = await resolveAsset(bin);\n  const binLocalUrl = await stringFromAsset(assets[0]);\n  if (binLocalUrl == null) {\n    throw new Error(`ExpoTHREE.parseBinAsync(): Unable to parse asset: ` + assets[0]);\n  }\n  const arrayBuffer = await loadBinAsync(binLocalUrl);\n\n  require('three/examples/js/loaders/BinaryLoader');\n  // @ts-ignore\n  const loader = new THREE.BinaryLoader();\n  loader.setPath && loader.setPath(assetProvider);\n  return new Promise((res, rej) =>\n    loader.parse(\n      arrayBuffer,\n      geometry => res({ geometry, materials }),\n      '', //This is probs wrong\n      materials\n    )\n  );\n}\n\n// async function parseMaterials({ json, onProgress, assetProvider }): Promise<any> {\n//   if (json.materials === undefined || json.materials.length === 0) {\n//   } else {\n//     // var materials = Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );\n//     throw new Error(\n//       'ExpoTHREE.parseAsync: THREE.JSONLoader material parsing not yet implemented :/'\n//     );\n//   }\n// }\n\nasync function parseWithLoaderAsync({ json, onProgress, assetProvider, loader }): Promise<any> {\n  loader.setPath && loader.setPath(assetProvider);\n  return loader.parse(json, assetProvider);\n}\n\ntype Parseable = {\n  json: any;\n  format?: string;\n  onProgress?: (...args: any[]) => any;\n  assetProvider: any;\n};\n\nexport default async function parseAsync({\n  json,\n  format,\n  onProgress,\n  assetProvider,\n}: Parseable): Promise<any> {\n  if (!format && json.metadata && json.metadata.type) {\n    format = json.metadata.type;\n  }\n\n  if (!format) {\n    throw new Error('ExpoTHREE: parseAsync: Invalid null format provided');\n  }\n\n  switch (format.toLowerCase()) {\n    case 'bin':\n      return parseBinAsync({ json, onProgress, assetProvider });\n    case 'clara':\n    case 'object':\n      return parseWithLoaderAsync({\n        json,\n        onProgress,\n        assetProvider,\n        loader: new THREE.ObjectLoader(),\n      });\n    case 'json':\n    case 'blender':\n      return parseWithLoaderAsync({\n        json,\n        onProgress,\n        assetProvider,\n        loader: new THREE.JSONLoader(),\n      });\n    case 'buffer':\n      return parseWithLoaderAsync({\n        json,\n        onProgress,\n        assetProvider,\n        loader: new THREE.BufferGeometryLoader(),\n      });\n    case 'scene':\n    default:\n      throw new Error(`ExpoTHREE.parseAsync: ${format} not supported.`);\n  }\n}\n"]}